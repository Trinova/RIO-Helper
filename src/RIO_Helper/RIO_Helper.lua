---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Panzerb√ºchse-Blackrock.
--- DateTime: 09-Apr-22 16:10
---
local AddonName, PrivateVariables = ...;

local DungeonAbbreviations = PrivateVariables.Data.DungeonAbbreviations
local WeeklyAffixAbbreviations = PrivateVariables.Data.WeeklyAffixAbbreviations

local RiohFunctions = PrivateVariables.Functions
local coerce = PrivateVariables.Functions.coerce

print("RIO Helper loaded")
SLASH_RIO_HELPER1, SLASH_RIO_HELPER2 = '/rioh', "/rh"
function SlashCmdList.RIO_HELPER(msg, editbox)
    -- pattern matching that skips leading whitespace and whitespace between cmd and args
    -- any whitespace at end of args is retained
    local foo, bar, dungeonAbbreviationPar, keyLevelPar, weeklyAffixPar = string.find(msg, "(%w+)%s+(%d+)%s+(%w+)")
    if not dungeonAbbreviationPar or not keyLevelPar or not weeklyAffixPar then
        print("Unknown parameters for /rh: \""..msg.."\"")
        print("Usage: /rh dungeonAbbreviation keyLevel weeklyAffix")
        return
    end
    --print("=====================")
    --print("'" .. msg .. "'")
    --print(foo)
    --print(bar)
    --print("dungeonAbbreviationPar: " .. dungeonAbbreviationPar)
    --print("keyLevelPar: " .. keyLevelPar)
    --print("weeklyAffixPar: " .. weeklyAffixPar)

    local dungeonId = DungeonAbbreviations[dungeonAbbreviationPar];
    local weeklyAffix = WeeklyAffixAbbreviations[weeklyAffixPar]
    --print("=====================")
    --print("dungeonId: " .. coerce(dungeonId, "nil"))
    --print("weeklyAffix: " .. coerce(weeklyAffix, "nil"))
    --if not dungeonId then
    --    print("{")
    --    for key, value in pairs(DungeonAbbreviations) do
    --        print("  " .. key .. " : " .. value)
    --    end
    --    print("}")
    --end
    local blizzardScores = {
        Tyrannical = { score = 0, baseScore = 0, timeBonus = 0, parTimePercentage = 0 },
        Fortified = { score = 0, baseScore = 0, timeBonus = 0, parTimePercentage = 0 }
    }
    local name, id, parTime = C_ChallengeMode.GetMapUIInfo(dungeonId)
    local blizzardDungeonAffixScoreData, blizzardDungeonTotalScore = C_MythicPlus.GetSeasonBestAffixScoreInfoForMap(dungeonId)
    blizzardDungeonTotalScore = coerce(blizzardDungeonTotalScore, 0)
    local blizzardCurrentSeasonTotalScore = C_ChallengeMode.GetOverallDungeonScore()

    blizzardScores[weeklyAffix] = RiohFunctions.computeScores(dungeonId, keyLevelPar, parTime)
    if (blizzardDungeonAffixScoreData ~= nil) then
        for _, weeklyAffixData in pairs(blizzardDungeonAffixScoreData) do
            if (weeklyAffixData.name ~= weeklyAffix) then
                blizzardScores[weeklyAffixData.name] = RiohFunctions.computeScores(dungeonId, weeklyAffixData.level, weeklyAffixData.durationSec)
            end
        end
    end
    --print(blizzardScores.Tyrannical.score)
    --print(blizzardScores.Fortified.score)
    local newSum = RiohFunctions.computeAffixScoreSum(blizzardScores.Tyrannical.score, blizzardScores.Fortified.score)
    local bonusScore = newSum - blizzardDungeonTotalScore
    print(RiohFunctions.formatNumber(bonusScore, 1) ..
            " from " .. blizzardDungeonTotalScore .. " to " ..
            RiohFunctions.formatNumber(newSum, 1, true)..
            " New total score: "..RiohFunctions.formatNumber((blizzardCurrentSeasonTotalScore + bonusScore), 1, true)
    )
end
